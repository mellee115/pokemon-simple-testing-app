{"version":3,"file":"react-multi-select-component.cjs.production.min.js","sources":["../src/lib/fuzzy-match-utils.tsx","../src/lib/get-string.tsx","../src/select-panel/default-item.tsx","../src/select-panel/index.tsx","../src/select-panel/select-item.tsx","../src/select-panel/select-list.tsx","../src/multi-select/arrow.tsx","../src/multi-select/loading.tsx","../src/multi-select/dropdown.tsx","../src/multi-select/header.tsx","../src/multi-select/index.tsx"],"sourcesContent":["import { Option } from \"./interfaces\";\n\n/**\n * A collection of string matching algorithms built with React Select in mind.\n */\n\n// Option type from React Select and similar libraries.\ntype MapOfStrings = { [key: string]: string };\n\n/**\n * Filters React Select options and sorts by similarity to a search filter.\n * Handles partial matches, eg. searching for \"Waberg High\" will find \"Raoul\n * Wallenberg Traditional High School\". Case insensitive. Ignores\n * non-alphanumeric characters.\n *\n * @param  options  An unfiltered list of Options.\n * @param? filter  A string to compare against Option labels.\n * @param? substitutions  Strings with multiple spellings or variations that we\n *           expect to match, eg. accented characters or abbreviated words.\n *\n * @return A filtered and sorted array of Options.\n */\nexport function filterOptions(\n  options: Option[],\n  filter?: string,\n  substitutions?: MapOfStrings\n): Option[] {\n  // If the filter is blank, return the full list of Options.\n  if (!filter) {\n    return options;\n  }\n\n  const cleanFilter = cleanUpText(filter, substitutions);\n  return (\n    options\n      // Filter out undefined or null Options.\n      .filter(({ label, value }) => label != null && value != null)\n      // Create a {score, Option} pair for each Option based on its label's\n      // similarity to the filter text.\n      .map((option) => ({\n        option: option,\n        score: typeaheadSimilarity(\n          cleanUpText(option.label, substitutions),\n          cleanFilter\n        ),\n      }))\n      // Only include matches of the entire substring, with a slight\n      // affordance for transposition or extra characters.\n      .filter((pair) => pair.score >= cleanFilter.length - 2)\n      // Sort 'em by order of their score.\n      .sort((a, b) => b.score - a.score)\n      // …and grab the original Options back from their pairs.\n      .map((pair) => pair.option)\n  );\n}\n\n/**\n * Scores the similarity between two strings by returning the length of the\n * longest common subsequence. Intended for comparing strings of different\n * lengths; eg. when matching a typeahead search input with a school name.\n\n * Meant for use in an instant search box where results are being fetched\n * as a user is typing.\n *\n * @param  a  The longer string (though, we flip them if it's shorter).\n * @param  b  The shorter string, eg. a typeahead search input.\n *\n * @return The length of the longest common subsequence. Higher scores indicate\n *           closer matches.\n */\nexport function typeaheadSimilarity(a: string, b: string): number {\n  const aLength = a.length;\n  const bLength = b.length;\n  const table: any[] = [];\n\n  if (!aLength || !bLength) {\n    return 0;\n  }\n\n  // Ensure `a` isn't shorter than `b`.\n  if (aLength < bLength) {\n    [a, b] = [b, a];\n  }\n\n  // Early exit if `a` includes `b`; these will be scored higher than any\n  // other options with the same `b` (filter string), with a preference for\n  // shorter `a` strings (option labels).\n  if (a.indexOf(b) !== -1) {\n    return bLength + 1 / aLength;\n  }\n\n  // Initialize the table axes:\n  //\n  //    0 0 0 0 ... bLength\n  //    0\n  //    0\n  //\n  //   ...\n  //\n  // aLength\n  //\n  for (let x = 0; x <= aLength; ++x) {\n    table[x] = [0];\n  }\n  for (let y = 0; y <= bLength; ++y) {\n    table[0][y] = 0;\n  }\n\n  // Populate the rest of the table with a dynamic programming algorithm.\n  for (let x = 1; x <= aLength; ++x) {\n    for (let y = 1; y <= bLength; ++y) {\n      table[x][y] =\n        a[x - 1] === b[y - 1]\n          ? 1 + table[x - 1][y - 1]\n          : Math.max(table[x][y - 1], table[x - 1][y]);\n    }\n  }\n\n  return table[aLength][bLength];\n}\n\n/**\n * Apply string substitutions, remove non-alphanumeric characters, and convert\n * all letters to uppercase.\n *\n * eg. 'Scoil Bhríde Primary School' may become 'SCOILBHRIDEPRIMARYSCHOOL'.\n *\n * @param  input  An unsanitized input string.\n * @param  substitutions  Strings with multiple spellings or variations that we\n *          expect to match, for example accented characters or abbreviated\n *          words.\n *\n * @return The sanitized text.\n */\nexport function cleanUpText(\n  input?: string,\n  substitutions?: MapOfStrings\n): string {\n  if (!input) {\n    return \"\";\n  }\n\n  // Uppercase and remove all non-alphanumeric, non-accented characters.\n  // Also remove underscores.\n  input = input.toUpperCase().replace(/((?=[^\\u00E0-\\u00FC])\\W)|_/g, \"\");\n\n  if (!substitutions) {\n    return input;\n  }\n  const safeSubstitutions: MapOfStrings = substitutions; // For Flow.\n\n  // Replace all strings in `safeSubstitutions` with their standardized\n  // counterparts.\n  return Object.keys(safeSubstitutions).reduce((output, substitution) => {\n    const unsubbed = new RegExp(substitution, \"g\");\n    return output.replace(unsubbed, safeSubstitutions[substitution]);\n  }, input);\n}\n","const strings = {\n  selectSomeItems: \"Select...\",\n  allItemsAreSelected: \"All items are selected.\",\n  selectAll: \"Select All\",\n  search: \"Search\",\n};\n\nfunction getString(key: string, overrideStrings?): string {\n  if (overrideStrings && overrideStrings[key]) {\n    return overrideStrings[key];\n  }\n\n  return strings[key];\n}\n\nexport default getString;\n","import { css } from \"goober\";\nimport React from \"react\";\n\nimport { Option } from \"../lib/interfaces\";\n\ninterface IDefaultItemRendererProps {\n  checked: boolean;\n  option: Option;\n  disabled?: boolean;\n  onClick;\n}\n\nconst DefaultRenderer = css({\n  \"& input,& span\": {\n    verticalAlign: \"middle\",\n    margin: 0,\n  },\n  span: {\n    display: \"inline-block\",\n    paddingLeft: \"5px\",\n  },\n  \"&.disabled\": {\n    opacity: 0.5,\n  },\n});\n\nconst DefaultItemRenderer = ({\n  checked,\n  option,\n  onClick,\n  disabled,\n}: IDefaultItemRendererProps) => {\n  return (\n    <div\n      className={`${DefaultRenderer} item-renderer ${disabled && \"disabled\"}`}\n    >\n      <input\n        type=\"checkbox\"\n        onChange={onClick}\n        checked={checked}\n        tabIndex={-1}\n        disabled={disabled}\n      />\n      <span>{option.label}</span>\n    </div>\n  );\n};\n\nexport default DefaultItemRenderer;\n","/**\n * This component represents the entire panel which gets dropped down when the\n * user selects the component.  It encapsulates the search filter, the\n * Select-all item, and the list of options.\n */\nimport { css } from \"goober\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { filterOptions } from \"../lib/fuzzy-match-utils\";\nimport getString from \"../lib/get-string\";\nimport { Option } from \"../lib/interfaces\";\nimport SelectItem from \"./select-item\";\nimport SelectList from \"./select-list\";\n\ninterface ISelectPanelProps {\n  ItemRenderer?: Function;\n  options: Option[];\n  value: Option[];\n  focusSearchOnOpen: boolean;\n  selectAllLabel?: string;\n  onChange: (selected: Option[]) => void;\n  disabled?: boolean;\n  disableSearch?: boolean;\n  hasSelectAll: boolean;\n  filterOptions?: (options: Option[], filter: string) => Option[];\n  overrideStrings?: { [key: string]: string };\n}\n\nenum FocusType {\n  SEARCH = -1,\n  NONE = 0,\n}\n\nconst SelectSearchContainer = css({\n  width: \"100%\",\n  borderBottom: \"1px solid var(--rmsc-border)\",\n  input: {\n    height: \"var(--rmsc-height)\",\n    padding: \"0 var(--rmsc-spacing)\",\n    width: \"100%\",\n    outline: \"none\",\n    border: \"0\",\n  },\n});\n\nexport const SelectPanel = (props: ISelectPanelProps) => {\n  const {\n    onChange,\n    options,\n    value,\n    filterOptions: customFilterOptions,\n    selectAllLabel,\n    ItemRenderer,\n    disabled,\n    disableSearch,\n    focusSearchOnOpen,\n    hasSelectAll,\n    overrideStrings,\n  } = props;\n  const [searchText, setSearchText] = useState(\"\");\n  const [focusIndex, setFocusIndex] = useState(\n    focusSearchOnOpen ? FocusType.SEARCH : FocusType.NONE\n  );\n\n  const [selectAllLength, setSelectAllLength] = useState<number>();\n  const selectAllOption = {\n    label: selectAllLabel || getString(\"selectAll\", overrideStrings),\n    value: \"\",\n  };\n\n  useEffect(() => {\n    setSelectAllLength(selectAllValues(true).length);\n    // eslint-disable-next-line\n  }, [options]);\n\n  const selectAllValues = (checked) => {\n    const selectedValues = value.map((o) => o.value);\n    return options.filter(({ disabled, value }) => {\n      if (checked) {\n        return !disabled || selectedValues.includes(value);\n      }\n      return disabled && selectedValues.includes(value);\n    });\n  };\n\n  const selectAllChanged = (checked: boolean) => {\n    const newOptions = selectAllValues(checked);\n    onChange(newOptions);\n  };\n\n  const handleSearchChange = (e) => {\n    setSearchText(e.target.value);\n    setFocusIndex(FocusType.SEARCH);\n  };\n\n  const handleItemClicked = (index: number) => setFocusIndex(index);\n\n  const handleKeyDown = (e) => {\n    switch (e.which) {\n      case 38: // Up Arrow\n        if (e.altKey) {\n          return;\n        }\n        updateFocus(-1);\n        break;\n      case 40: // Down Arrow\n        if (e.altKey) {\n          return;\n        }\n        updateFocus(1);\n        break;\n      default:\n        return;\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  const handleSearchFocus = () => {\n    setFocusIndex(FocusType.SEARCH);\n  };\n\n  const filteredOptions = () =>\n    customFilterOptions\n      ? customFilterOptions(options, searchText)\n      : filterOptions(options, searchText);\n\n  const updateFocus = (offset: number) => {\n    let newFocus = focusIndex + offset;\n    newFocus = Math.max(0, newFocus);\n    newFocus = Math.min(newFocus, options.length);\n    setFocusIndex(newFocus);\n  };\n\n  return (\n    <div className=\"select-panel\" role=\"listbox\" onKeyDown={handleKeyDown}>\n      {!disableSearch && (\n        <div className={SelectSearchContainer}>\n          <input\n            autoFocus={focusSearchOnOpen}\n            placeholder={getString(\"search\", overrideStrings)}\n            type=\"search\"\n            aria-describedby={getString(\"search\", overrideStrings)}\n            onChange={handleSearchChange}\n            onFocus={handleSearchFocus}\n          />\n        </div>\n      )}\n\n      {hasSelectAll && !searchText && (\n        <SelectItem\n          focused={focusIndex === 0}\n          checked={selectAllLength === value.length}\n          option={selectAllOption}\n          onSelectionChanged={selectAllChanged}\n          onClick={() => handleItemClicked(0)}\n          itemRenderer={ItemRenderer}\n          disabled={disabled}\n        />\n      )}\n\n      <SelectList\n        {...props}\n        options={filteredOptions()}\n        focusIndex={focusIndex - 1}\n        onClick={(_e, index) => handleItemClicked(index + 1)}\n        ItemRenderer={ItemRenderer}\n        disabled={disabled}\n      />\n    </div>\n  );\n};\n\nexport default SelectPanel;\n","/**\n * This component represents an individual item in the multi-select drop-down\n */\nimport { css } from \"goober\";\nimport React, { useEffect, useRef } from \"react\";\n\nimport { Option } from \"../lib/interfaces\";\nimport DefaultItemRenderer from \"./default-item\";\n\ninterface ISelectItemProps {\n  itemRenderer;\n  option: Option;\n  checked: boolean;\n  focused?: boolean;\n  disabled?: boolean;\n  onSelectionChanged: (checked: boolean) => void;\n  onClick;\n}\n\nconst ItemContainer = css({\n  boxSizing: \"border-box\",\n  cursor: \"pointer\",\n  display: \"block\",\n  padding: \"var(--rmsc-spacing)\",\n  outline: \"0\",\n  \"&:hover,&:focus\": {\n    background: \"var(--rmsc-hover)\",\n  },\n  \"&.selected\": {\n    background: \"var(--rmsc-selected)\",\n  },\n});\n\nconst SelectItem = ({\n  itemRenderer: ItemRenderer = DefaultItemRenderer,\n  option,\n  checked,\n  focused,\n  disabled,\n  onSelectionChanged,\n  onClick,\n}: ISelectItemProps) => {\n  const itemRef: any = useRef();\n\n  useEffect(() => {\n    updateFocus();\n    // eslint-disable-next-line\n  }, [focused]);\n\n  const toggleChecked = () => {\n    onSelectionChanged(!checked);\n  };\n\n  const handleClick = (e) => {\n    toggleChecked();\n    onClick(e);\n  };\n\n  const updateFocus = () => {\n    if (focused && !disabled && itemRef) {\n      itemRef.current.focus();\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    switch (e.which) {\n      case 13: // Enter\n      case 32: // Space\n        toggleChecked();\n        break;\n      default:\n        return;\n    }\n    e.preventDefault();\n  };\n\n  return (\n    <label\n      className={`${ItemContainer} select-item ${checked && \"selected\"}`}\n      role=\"option\"\n      aria-selected={checked}\n      tabIndex={-1}\n      ref={itemRef}\n      onKeyDown={handleKeyDown}\n    >\n      <ItemRenderer\n        option={option}\n        checked={checked}\n        onClick={handleClick}\n        disabled={disabled}\n      />\n    </label>\n  );\n};\n\nexport default SelectItem;\n","/**\n * This component represents an unadorned list of SelectItem (s).\n */\nimport { css } from \"goober\";\nimport React from \"react\";\n\nimport { Option } from \"../lib/interfaces\";\nimport SelectItem from \"./select-item\";\n\ninterface ISelectListProps {\n  focusIndex: number;\n  ItemRenderer?: Function;\n  options: Option[];\n  value: Option[];\n  onChange: (selected: Option[]) => void;\n  onClick: Function;\n  disabled?: boolean;\n}\n\nconst SelectListUl = css({\n  margin: 0,\n  paddingLeft: 0,\n  li: {\n    listStyle: \"none\",\n    margin: 0,\n  },\n});\n\nconst SelectList = ({\n  value,\n  onChange,\n  disabled,\n  ItemRenderer,\n  options,\n  focusIndex,\n  onClick,\n}: ISelectListProps) => {\n  const handleSelectionChanged = (option: Option, checked: boolean) => {\n    if (disabled) {\n      return;\n    }\n    onChange(\n      checked\n        ? [...value, option]\n        : value.filter((o: any) => o.value !== option.value)\n    );\n  };\n\n  return (\n    <ul className={SelectListUl}>\n      {options.map((o: any, i) => (\n        <li key={o.hasOwnProperty(\"key\") ? o.key : i}>\n          <SelectItem\n            focused={focusIndex === i}\n            option={o}\n            onSelectionChanged={(c) => handleSelectionChanged(o, c)}\n            checked={value.find((s) => s.value === o.value) ? true : false}\n            onClick={(e) => onClick(e, i)}\n            itemRenderer={ItemRenderer}\n            disabled={o.disabled || disabled}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default SelectList;\n","import React from \"react\";\n\nexport default function Arrow({ expanded = false }) {\n  return (\n    <span\n      className=\"dropdown-heading-dropdown-arrow gray\"\n      style={{ paddingTop: \"4px\" }}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        viewBox=\"0 0 24 24\"\n      >\n        {expanded ? (\n          <polyline points=\"18 15 12 9 6 15\"></polyline>\n        ) : (\n          <path d=\"M6 9L12 15 18 9\"></path>\n        )}\n      </svg>\n    </span>\n  );\n}\n","import { css } from \"goober\";\nimport React from \"react\";\n\nconst Spinner = css({\n  animation: \"rotate 2s linear infinite\",\n\n  \"& .path\": {\n    stroke: \"var(--rmsc-border)\",\n    strokeWidth: \"4px\",\n    strokeLinecap: \"round\",\n    animation: \"dash 1.5s ease-in-out infinite\",\n  },\n\n  \"@keyframes rotate\": {\n    \"100%\": {\n      transform: \"rotate(360deg)\",\n    },\n  },\n\n  \"@keyframes dash\": {\n    \"0%\": {\n      strokeDasharray: \"1, 150\",\n      strokeDashoffset: \"0\",\n    },\n    \"50%\": {\n      strokeDasharray: \"90, 150\",\n      strokeDashoffset: \"-35\",\n    },\n    \"100%\": {\n      strokeDasharray: \"90, 150\",\n      strokeDashoffset: \"-124\",\n    },\n  },\n});\n\nfunction Loading({ size = 26 }) {\n  return (\n    <div\n      style={{\n        cursor: \"pointer\",\n        display: \"table-cell\",\n        verticalAlign: \"middle\",\n        width: size,\n        marginRight: \"0.2rem\",\n      }}\n    >\n      <svg\n        width={size}\n        height={size}\n        className={Spinner}\n        viewBox=\"0 0 50 50\"\n        style={{ display: \"inline-block\", verticalAlign: \"middle\" }}\n      >\n        <circle cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" className=\"path\"></circle>\n      </svg>\n    </div>\n  );\n}\n\nexport default Loading;\n","/**\n * A generic dropdown component.  It takes the children of the component\n * and hosts it in the component.  When the component is selected, it\n * drops-down the contentComponent and applies the contentProps.\n */\nimport useOutsideClick from \"@rooks/use-outside-click\";\nimport { css } from \"goober\";\nimport React, { useRef, useState, useEffect } from \"react\";\n\nimport Arrow from \"./arrow\";\nimport Loading from \"./loading\";\n\ninterface IDropdownProps {\n  children?;\n  contentComponent;\n  contentProps: object;\n  isLoading?: boolean;\n  disabled?: boolean;\n  shouldToggleOnHover?: boolean;\n  labelledBy?: string;\n  onMenuToggle?;\n  ArrowRenderer?;\n}\n\nconst PanelContainer = css({\n  position: \"absolute\",\n  zIndex: 1,\n  top: \"100%\",\n  width: \"100%\",\n  paddingTop: \"8px\",\n  \".panel-content\": {\n    maxHeight: \"300px\",\n    overflowY: \"auto\",\n    borderRadius: \"var(--rmsc-border-radius)\",\n    backgroundColor: \"var(--rmsc-background)\",\n    boxShadow:\n      \"0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)\",\n  },\n});\n\nconst DropdownContainer = css({\n  position: \"relative\",\n  outline: \"none\",\n  backgroundColor: \"var(--rmsc-background)\",\n  border: \"1px solid var(--rmsc-border)\",\n  borderRadius: \"var(--rmsc-border-radius)\",\n  \"&:focus-within\": {\n    boxShadow: \"var(--rmsc-primary) 0px 0px 0px 1px\",\n    borderColor: \"var(--rmsc-primary)\",\n  },\n});\n\nconst DropdownHeading = css({\n  position: \"relative\",\n  padding: \"0 var(--rmsc-spacing)\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"flex-end\",\n  overflow: \"hidden\",\n  width: \"100%\",\n  height: \"var(--rmsc-height)\",\n  cursor: \"default\",\n  outline: \"none\",\n  \".dropdown-heading-value\": {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n    flex: \"1\",\n  },\n});\n\nconst Dropdown = ({\n  children,\n  contentComponent: ContentComponent,\n  contentProps,\n  isLoading,\n  disabled,\n  shouldToggleOnHover,\n  labelledBy,\n  onMenuToggle,\n  ArrowRenderer,\n}: IDropdownProps) => {\n  const [expanded, setExpanded] = useState(false);\n  const [hasFocus, setHasFocus] = useState(false);\n  const FinalArrow = ArrowRenderer || Arrow;\n\n  const wrapper: any = useRef();\n\n  useOutsideClick(wrapper, () => setExpanded(false));\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    onMenuToggle && onMenuToggle(expanded);\n  }, [expanded]);\n\n  const handleKeyDown = (e) => {\n    switch (e.which) {\n      case 27: // Escape\n      case 38: // Up Arrow\n        setExpanded(false);\n        break;\n      case 13: // Enter Key\n      case 40: // Down Arrow\n        setExpanded(true);\n        break;\n      default:\n        return;\n    }\n    e.preventDefault();\n  };\n  const handleHover = (iexpanded: boolean) => {\n    shouldToggleOnHover && setExpanded(iexpanded);\n  };\n  const handleFocus = (e) => {\n    e.target === wrapper && !hasFocus && setHasFocus(true);\n  };\n  const handleBlur = () => hasFocus && setHasFocus(false);\n  const handleMouseEnter = () => handleHover(true);\n  const handleMouseLeave = () => handleHover(false);\n  const toggleExpanded = () =>\n    setExpanded(isLoading || disabled ? false : !expanded);\n\n  return (\n    <div\n      tabIndex={0}\n      className={`${DropdownContainer} dropdown-container`}\n      aria-labelledby={labelledBy}\n      aria-expanded={expanded}\n      aria-readonly=\"true\"\n      aria-disabled={disabled}\n      ref={wrapper}\n      onKeyDown={handleKeyDown}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <div\n        className={`${DropdownHeading} dropdown-heading`}\n        onClick={toggleExpanded}\n      >\n        <div className=\"dropdown-heading-value\">{children}</div>\n        {isLoading && <Loading />}\n        <FinalArrow expanded={expanded} />\n      </div>\n      {expanded && (\n        <div className={`${PanelContainer} dropdown-content`}>\n          <div className=\"panel-content\">\n            <ContentComponent {...contentProps} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n","import React from \"react\";\n\nimport getString from \"../lib/get-string\";\n\nconst DropdownHeader = ({ value, options, valueRenderer, overrideStrings }) => {\n  const noneSelected = value.length === 0;\n  const allSelected = value.length === options.length;\n  const customText = valueRenderer && valueRenderer(value, options);\n\n  const getSelectedText = () => value.map((s) => s.label).join(\", \");\n\n  if (noneSelected) {\n    return (\n      <span className=\"gray\">\n        {customText || getString(\"selectSomeItems\", overrideStrings)}\n      </span>\n    );\n  }\n\n  return (\n    <span>\n      {customText\n        ? customText\n        : allSelected\n        ? getString(\"allItemsAreSelected\", overrideStrings)\n        : getSelectedText()}\n    </span>\n  );\n};\n\nexport default DropdownHeader;\n","import { css } from \"goober\";\nimport React from \"react\";\n\nimport { ISelectProps } from \"../lib/interfaces\";\nimport SelectPanel from \"../select-panel\";\nimport Dropdown from \"./dropdown\";\nimport DropdownHeader from \"./header\";\n\nconst MultiSelectBox = css({\n  \"--rmscPrimary\": \"#4285f4\",\n  \"--rmscHover\": \"#f1f3f5\",\n  \"--rmscSelected\": \"#e2e6ea\",\n  \"--rmscBorder\": \"#ccc\",\n  \"--rmscGray\": \"#aaa\",\n  \"--rmscBackground\": \"#fff\",\n  \"--rmscSpacing\": \"10px\",\n  \"--rmscBorderRadius\": \"4px\",\n  \"--rmscHeight\": \"38px\",\n\n  \"*\": {\n    boxSizing: \"border-box\",\n    transition: \"all 0.2s ease\",\n  },\n  \".gray\": {\n    color: \"var(--rmsc-gray)\",\n  },\n});\n\nconst MultiSelect = ({\n  focusSearchOnOpen = true,\n  hasSelectAll = true,\n  shouldToggleOnHover = false,\n  className = \"multi-select\",\n  options,\n  value,\n  valueRenderer,\n  overrideStrings,\n  onChange,\n  disabled,\n  ItemRenderer,\n  ArrowRenderer,\n  selectAllLabel,\n  isLoading,\n  disableSearch,\n  filterOptions,\n  labelledBy,\n  onMenuToggle,\n}: ISelectProps) => {\n  const nvalue = value || [];\n  return (\n    <div className={`${MultiSelectBox} ${className}`}>\n      <Dropdown\n        isLoading={isLoading}\n        contentComponent={SelectPanel}\n        shouldToggleOnHover={shouldToggleOnHover}\n        contentProps={{\n          ItemRenderer,\n          options,\n          value: nvalue,\n          hasSelectAll,\n          selectAllLabel,\n          onChange,\n          disabled,\n          disableSearch,\n          focusSearchOnOpen,\n          filterOptions,\n          overrideStrings,\n        }}\n        disabled={disabled}\n        labelledBy={labelledBy}\n        onMenuToggle={onMenuToggle}\n        ArrowRenderer={ArrowRenderer}\n      >\n        <DropdownHeader\n          value={nvalue}\n          options={options}\n          valueRenderer={valueRenderer}\n          overrideStrings={overrideStrings}\n        />\n      </Dropdown>\n    </div>\n  );\n};\n\nexport default MultiSelect;\n"],"names":["typeaheadSimilarity","a","b","aLength","length","bLength","table","indexOf","x","y","Math","max","cleanUpText","input","substitutions","toUpperCase","replace","safeSubstitutions","Object","keys","reduce","output","substitution","unsubbed","RegExp","strings","selectSomeItems","allItemsAreSelected","selectAll","search","getString","key","overrideStrings","FocusType","DefaultRenderer","css","verticalAlign","margin","span","display","paddingLeft","opacity","DefaultItemRenderer","option","disabled","React","className","type","onChange","onClick","checked","tabIndex","label","ItemContainer","boxSizing","cursor","padding","outline","background","SelectItem","itemRenderer","ItemRenderer","focused","onSelectionChanged","itemRef","useRef","useEffect","updateFocus","toggleChecked","current","focus","role","ref","onKeyDown","e","which","preventDefault","SelectListUl","li","listStyle","SelectList","value","focusIndex","options","map","o","i","hasOwnProperty","c","filter","find","s","SelectSearchContainer","width","borderBottom","height","border","SelectPanel","props","customFilterOptions","filterOptions","selectAllLabel","disableSearch","focusSearchOnOpen","hasSelectAll","useState","searchText","setSearchText","SEARCH","NONE","setFocusIndex","selectAllLength","setSelectAllLength","selectAllOption","selectAllValues","selectedValues","includes","handleItemClicked","index","offset","newFocus","min","altKey","stopPropagation","autoFocus","placeholder","target","onFocus","newOptions","cleanFilter","score","pair","sort","_e","Arrow","expanded","style","paddingTop","xmlns","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","viewBox","points","d","Spinner","animation","transform","strokeDasharray","strokeDashoffset","Loading","size","marginRight","cx","cy","r","PanelContainer","position","zIndex","top","maxHeight","overflowY","borderRadius","backgroundColor","boxShadow","DropdownContainer","borderColor","DropdownHeading","alignItems","justifyContent","overflow","textOverflow","whiteSpace","flex","Dropdown","children","ContentComponent","contentComponent","contentProps","isLoading","shouldToggleOnHover","labelledBy","onMenuToggle","ArrowRenderer","setExpanded","hasFocus","setHasFocus","FinalArrow","wrapper","useOutsideClick","handleHover","iexpanded","onBlur","onMouseEnter","onMouseLeave","DropdownHeader","valueRenderer","noneSelected","allSelected","customText","join","MultiSelectBox","transition","color","nvalue"],"mappings":"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"}